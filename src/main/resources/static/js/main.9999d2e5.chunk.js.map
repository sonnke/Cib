{"version":3,"sources":["Modal.js","App.js","serviceWorker.js","index.js"],"names":["AddUser","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleShow","bind","assertThisInitialized","handleClose","state","show","setState","react_default","a","createElement","Fragment","Button","variant","className","onClick","Modal","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","placeholder","Row","as","Col","value","React","Component","App","src_Modal","Table","striped","bordered","hover","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9999d2e5.chunk.js","sourcesContent":["import React from \"react\";\nimport {Modal,Button,Form,Col,Row} from \"react-bootstrap\";\n\nclass AddUser extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n  \n      this.handleShow = this.handleShow.bind(this);\n      this.handleClose = this.handleClose.bind(this);\n  \n      this.state = {\n        show: false,\n      };\n    }\n  \n    handleClose() {\n      this.setState({ show: false });\n    }\n  \n    handleShow() {\n      this.setState({ show: true });\n    }\n  \n    render() {\n      return (\n        <>\n          <Button variant=\"primary\" className=\"text-right\" onClick={this.handleShow}>\n            Add \n          </Button>\n  \n          <Modal show={this.state.show} onHide={this.handleClose}>\n            <Modal.Header closeButton>\n              <Modal.Title>Add User</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n\n            <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter name\" />\n                </Form.Group>\n                <Form.Group controlId=\"lastName\">\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter name\" />\n                </Form.Group>\n\n                <Row>\n                <Form.Group as={Col}>\n                    <Form.Label>User Name</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter username\" />\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\n                </Form.Group>\n                </Row>\n                <Row>\n                <Form.Group as={Col}>\n                    <Form.Label>Customer</Form.Label>\n                    <Form.Control as=\"select\">\n                    <option value=\"\">Choose...</option>\n                    <option value=\"Company AAA\">Company AAA</option>\n                    <option value=\"Company BBB\">Company BBB</option>\n                    </Form.Control>\n                    \n                </Form.Group>\n\n                <Form.Group as={Col}>\n                    <Form.Label>Role</Form.Label>\n                    <Form.Control as=\"select\">\n                    <option value=\"\">Choose...</option>\n                    <option value=\"Admin\">Admin</option>\n                    <option value=\"Customer\">Customer</option>\n                    </Form.Control>\n                </Form.Group>\n                </Row>\n                <Form.Group controlId=\"cell\">\n                    <Form.Label>Cell</Form.Label>\n                    <Form.Control type=\"number\" placeholder=\"Cell number\" />\n                </Form.Group>\n                <hr/>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n                </Form>\n            </Modal.Body>\n          </Modal>\n        </>\n      );\n    }\n  }\n\n  export default AddUser;","import React from 'react';\nimport Modal from './Modal';\nimport {Table} from \"react-bootstrap\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n    <br/><br/>\n     <Modal/>\n     <br/><br/>\n     <Table striped bordered hover>\n      <thead>\n        <tr>\n          \n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Username(*)</th>\n          <th>Password</th>\n          <th>Customer</th>\n          <th>Role</th>\n          <th>Email</th>\n          <th>Cell</th>\n        </tr>\n      </thead>\n      <tbody>\n        {/* <tr>\n          \n          <td>Mark</td>\n          <td>Otto</td>\n          <td>@mdo</td>\n          <td>1</td>\n          <td>Mark</td>\n          <td>Otto</td>\n          <td>@mdo</td>\n          <th>021212121212</th>\n        </tr>\n        <tr>\n         \n          <td>Jacob</td>\n          <td>Thornton</td>\n          <td>@fat</td>\n          <td>1</td>\n          <td>Mark</td>\n          <td>Otto</td>\n          <td>@mdo</td>\n          <th>021212121212</th>\n        </tr> */}\n        \n      </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}